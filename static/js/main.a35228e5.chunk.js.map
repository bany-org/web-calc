{"version":3,"sources":["assets/tadadum.mp3","assets/pik.mp3","assets/bum.mp3","components/Display.js","components/Button.js","components/Keyboard.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","DisplayArea","styled","div","ExpressionRow","ResultRow","Display","values","val","result","console","log","toString","length","toExponential","expression","operator","currentInput","CalcButton","props","color","css","Button","onClick","onButtonClick","children","KeyboardRow","Keyboard","convertPercentageToNumber","clearExpression","changeCurrentInputSign","addDecimalToExpression","addNumberToExpression","addOperatorToExpression","evalueteExpression","clearAudio","Audio","clearSound","buttonAudio","buttonSound","evalAudio","evalSound","CalculatorWrapper","Calculator","App","isTotalInputTooLong","state","number","setState","indexOf","play","changed","substring","concat","parseFloat","evaluate","toFixed","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a35228e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tadadum.8304135c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/pik.9f1dbdbc.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bum.e42ea5ed.mp3\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst DisplayArea = styled.div`\r\n    width: 100%;\r\n    height: 140px;\r\n    background-color: #212121;\r\n    color: #ffffff;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst ExpressionRow = styled.div`\r\n    height: 100%;\r\n    font-family: Lato;\r\n    font-size: 18px;\r\n    letter-spacing: normal;\r\n    text-align: right;\r\n    color: #d98192;\r\n    padding-top: 28px;\r\n    padding-right: 28px;\r\n`;\r\n\r\nconst ResultRow = styled.div`\r\n    margin-top: 18px;\r\n    font-family: Lato;\r\n    font-size: 50px;\r\n    font-weight: 300;\r\n    text-align: right;\r\n    color: #ffffff;\r\n    padding-right: 28px;\r\n    word-break: break-all;\r\n`;\r\n\r\nconst Display = ({ values }) => {\r\n    let val = values.result;\r\n    console.log(\"result\", val);\r\n\r\n    if (val > 999999999 || val.toString().length > 10) {\r\n        val = val.toExponential(4);\r\n        console.log(\"val po toExp,\", val, val.length, val.toString().length);\r\n    }\r\n\r\n    return (\r\n        <DisplayArea>\r\n            <ExpressionRow>\r\n                {values.expression + values.operator + values.currentInput}\r\n            </ExpressionRow>\r\n            <ResultRow>{val}</ResultRow>\r\n        </DisplayArea>\r\n    );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst CalcButton = styled.div`\r\n    width: 92px;\r\n    max-height: 92px;\r\n    background-image: linear-gradient(to right, #ffffff, #f4f4f4);\r\n    font-family: Lato;\r\n    font-size: 23px;\r\n    font-weight: 300;\r\n    color: #212121;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex: 1;\r\n    cursor: pointer; \r\n    user-select: none;\r\n\r\n    :hover {\r\n        font-weight: 700;\r\n        border: 1px solid #cccccc;   \r\n    }\r\n\r\n    ${(props) =>\r\n        props.color === \"violet\" &&\r\n        css`\r\n            background-color: #9156e1;\r\n            background-image: none;\r\n            color: #ffffff;\r\n        `}\r\n\r\n    ${(props) =>\r\n        props.color === \"dark\" &&\r\n        css`\r\n            background-image: linear-gradient(to right, #f7f7f7, #f1f1f1);\r\n        `}\r\n\r\n    ${(props) =>\r\n        props.color === \"pink\" &&\r\n        css`\r\n            background-color: #e62f89;\r\n            background-image: none;\r\n            color: #ffffff;\r\n            flex: 2;\r\n        `}\r\n`;\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <CalcButton\r\n            color={props.color}\r\n            onClick={() => props.onButtonClick(props.children)}\r\n        >\r\n            {props.children}\r\n        </CalcButton>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nconst KeyboardRow = styled.div`\r\n    display: flex;\r\n    height: 100%;\r\n    margin: 0;\r\n`;\r\n\r\nconst Keyboard = ({\r\n    convertPercentageToNumber,\r\n    clearExpression,\r\n    changeCurrentInputSign,\r\n    addDecimalToExpression,\r\n    addNumberToExpression,\r\n    addOperatorToExpression,\r\n    evalueteExpression,\r\n}) => {\r\n    return (\r\n        <>\r\n            <KeyboardRow>\r\n                <Button color=\"dark\" onButtonClick={convertPercentageToNumber}>\r\n                    %\r\n                </Button>\r\n                <Button color=\"dark\" onButtonClick={changeCurrentInputSign}>\r\n                    +/-\r\n                </Button>\r\n                <Button color=\"dark\" onButtonClick={clearExpression}>\r\n                    C\r\n                </Button>\r\n                <Button color=\"violet\" onButtonClick={addOperatorToExpression}>\r\n                    {\" / \"}\r\n                </Button>\r\n            </KeyboardRow>\r\n            <KeyboardRow>\r\n                <Button onButtonClick={addNumberToExpression}>7</Button>\r\n                <Button onButtonClick={addNumberToExpression}>8</Button>\r\n                <Button onButtonClick={addNumberToExpression}>9</Button>\r\n                <Button\r\n                    onButtonClick={() => addOperatorToExpression(\" * \")}\r\n                    color=\"violet\"\r\n                >\r\n                    x\r\n                </Button>\r\n            </KeyboardRow>\r\n            <KeyboardRow>\r\n                <Button onButtonClick={addNumberToExpression}>4</Button>\r\n                <Button onButtonClick={addNumberToExpression}>5</Button>\r\n                <Button onButtonClick={addNumberToExpression}>6</Button>\r\n                <Button onButtonClick={addOperatorToExpression} color=\"violet\">\r\n                    {\" - \"}\r\n                </Button>\r\n            </KeyboardRow>\r\n            <KeyboardRow>\r\n                <Button onButtonClick={addNumberToExpression}>1</Button>\r\n                <Button onButtonClick={addNumberToExpression}>2</Button>\r\n                <Button onButtonClick={addNumberToExpression}>3</Button>\r\n                <Button color=\"violet\" onButtonClick={addOperatorToExpression}>\r\n                    {\" + \"}\r\n                </Button>\r\n            </KeyboardRow>\r\n            <KeyboardRow>\r\n                <Button onButtonClick={addNumberToExpression}>0</Button>\r\n                <Button onButtonClick={addDecimalToExpression}>,</Button>\r\n                <Button color=\"pink\" onButtonClick={evalueteExpression}>\r\n                    =\r\n                </Button>\r\n            </KeyboardRow>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Keyboard;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { evaluate } from \"mathjs\";\r\n\r\nimport Display from \"./Display\";\r\nimport Keyboard from \"./Keyboard\";\r\n\r\nimport clearSound from \"../assets/tadadum.mp3\";\r\nimport buttonSound from \"../assets/pik.mp3\";\r\nimport evalSound from \"../assets/bum.mp3\";\r\n\r\nconst clearAudio = new Audio(clearSound);\r\nconst buttonAudio = new Audio(buttonSound);\r\nconst evalAudio = new Audio(evalSound);\r\n\r\nconst startClearSound = () => {\r\n    clearAudio.play();\r\n};\r\n\r\nconst startButtonSound = () => {\r\n    buttonAudio.play();\r\n};\r\n\r\nconst startEvalSound = () => {\r\n    evalAudio.play();\r\n};\r\n\r\nconst CalculatorWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    align-items: center;\r\n    background-image: linear-gradient(to right bottom, #9c5cd7, #f69175);\r\n`;\r\n\r\nconst Calculator = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    width: 100vw;\r\n    max-width: 368px;\r\n    max-height: 600px;\r\n    border-radius: 5px;\r\n    background-color: #ffffff;\r\n    overflow: hidden;\r\n`;\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expression: \"\",\r\n            currentInput: \"\",\r\n            operator: \"\",\r\n            result: \"\",\r\n        };\r\n    }\r\n\r\n    isTotalInputTooLong = () => {\r\n        const expressionLength = this.state.expression.toString().length;\r\n        const currentInputLength = this.state.currentInput.toString().length;\r\n\r\n        if (expressionLength + currentInputLength >= 49) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    addNumberToExpression = (number) => {\r\n        if (this.isTotalInputTooLong()) {\r\n            return;\r\n        }\r\n\r\n        // prevent adding 0 before number without dot\r\n        if (this.state.currentInput === \"0\") {\r\n            return;\r\n        }\r\n\r\n        // prevent too long current input\r\n        if (this.state.currentInput.length > 9) {\r\n            return;\r\n        }\r\n\r\n        if (this.state.operator) {\r\n            this.setState({\r\n                expression: this.state.expression + this.state.operator,\r\n                currentInput: this.state.currentInput + number,\r\n                operator: \"\",\r\n                result: \"\",\r\n            });\r\n        } else {\r\n            this.setState({\r\n                expression: this.state.expression,\r\n                currentInput: this.state.currentInput + number,\r\n                operator: \"\",\r\n                result: \"\",\r\n            });\r\n        }\r\n    };\r\n\r\n    addDecimalToExpression = () => {\r\n        if (this.isTotalInputTooLong()) {\r\n            return;\r\n        }\r\n\r\n        // prevent adding dot without number\r\n        if (this.state.currentInput === \"\") {\r\n            return;\r\n        }\r\n\r\n        // add decimal only if no decimal in current expression\r\n        if (this.state.currentInput.indexOf(\".\") === -1) {\r\n            this.setState({\r\n                ...this.state,\r\n                currentInput: this.state.currentInput + \".\",\r\n            });\r\n        }\r\n    };\r\n\r\n    addOperatorToExpression = (operator) => {\r\n        if (this.isTotalInputTooLong()) {\r\n            return;\r\n        }\r\n\r\n        // prevent adding operator without any number\r\n        if (\r\n            this.state.expression === \"\" &&\r\n            this.state.currentInput === \"\" &&\r\n            this.state.result === \"\"\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        startButtonSound();\r\n\r\n        if (this.state.operator) {\r\n            this.setState({\r\n                expression: this.state.expression,\r\n                currentInput: \"\",\r\n                operator: operator,\r\n                result: this.state.result,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                expression:\r\n                    this.state.result ||\r\n                    this.state.expression + this.state.currentInput,\r\n                currentInput: \"\",\r\n                operator: operator,\r\n                result: \"\",\r\n            });\r\n        }\r\n    };\r\n\r\n    changeCurrentInputSign = () => {\r\n        // prevent changing sign without number\r\n        if (this.state.currentInput === \"\") {\r\n            return;\r\n        }\r\n\r\n        let changed = this.state.currentInput;\r\n\r\n        if (this.state.currentInput.toString().indexOf(\"-\") === 0) {\r\n            changed = changed.substring(1);\r\n        } else {\r\n            changed = \"-\".concat(this.state.currentInput);\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            currentInput: changed,\r\n        });\r\n    };\r\n\r\n    convertPercentageToNumber = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            currentInput: this.state.currentInput / 100,\r\n        });\r\n    };\r\n\r\n    clearExpression = () => {\r\n        startClearSound();\r\n\r\n        this.setState({\r\n            expression: \"\",\r\n            currentInput: \"\",\r\n            operator: \"\",\r\n            result: \"\",\r\n        });\r\n    };\r\n\r\n    evalueteExpression = () => {\r\n        // prevent eval if operator is last  element in expression - mathjs rule\r\n        if (this.state.currentInput === \"\") {\r\n            return;\r\n        }\r\n\r\n        startEvalSound();\r\n\r\n        this.setState({\r\n            expression: \"\",\r\n            operator: \"\",\r\n            currentInput: \"\",\r\n            result: parseFloat(\r\n                evaluate(\r\n                    this.state.expression +\r\n                        this.state.operator +\r\n                        this.state.currentInput\r\n                ).toFixed(6)\r\n            ),\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <CalculatorWrapper>\r\n                <Calculator>\r\n                    <Display values={this.state}></Display>\r\n                    <Keyboard\r\n                        convertPercentageToNumber={\r\n                            this.convertPercentageToNumber\r\n                        }\r\n                        changeCurrentInputSign={this.changeCurrentInputSign}\r\n                        clearExpression={this.clearExpression}\r\n                        addOperatorToExpression={this.addOperatorToExpression}\r\n                        addNumberToExpression={this.addNumberToExpression}\r\n                        addDecimalToExpression={this.addDecimalToExpression}\r\n                        evalueteExpression={this.evalueteExpression}\r\n                    />\r\n                </Calculator>\r\n            </CalculatorWrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}